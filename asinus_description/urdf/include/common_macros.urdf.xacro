<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">


<!-- ===================== Motor Hub xacro =====================================

  params:
  - prefix [string]: used to diferentiate the link and joint name;
  - reflect [1/-1]: value to set the side of the motor hub;
  - motor_hub_props [dictionary]: motor hub properties (includes wheel and motor);
  - base_props [dictionary]: base link properties;
  - mesh [string]: file name of the motor hub mesh;
    - DEFAULT Value -> Empty string
-->
  <xacro:macro name="motor_hub"
               params="robot_prefix prefix reflect motor_hub_props">
      <link name="${robot_prefix}${prefix}${motor_hub_props['number']}_motor_hub">
      <!-- Wheel Visual -->
      <xacro:if value="${motor_hub_props['wheel_mesh'] != '' }" >
        <visual>
          <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2.0*(reflect - 1)}"/>
          <geometry>
            <mesh filename="model:/$(find ${package_name})/meshes/${robot_name}/${motor_hub_props['wheel_mesh']}" />
          </geometry>
          <material name="dark_grey"/>
        </visual>
      </xacro:if>
      <xacro:if value="${motor_hub_props['wheel_mesh'] == '' }" >
        <visual>
          <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2.0*(reflect - 1)}"/>
          <geometry>
            <cylinder radius="${motor_hub_props['wheel_radius']}" length="${motor_hub_props['wheel_length']}"/>
          </geometry>
          <material name="dark_grey"/>
        </visual>
      </xacro:if>

      <!-- Collision (wheel only for ground contact) -->
      <collision>
        <origin xyz="0 0 0" rpy="${pi/2} 0 ${pi/2.0*(reflect - 1)}"/>
        <geometry>
          <cylinder radius="${motor_hub_props['wheel_radius']}" length="${motor_hub_props['wheel_length']}"/>
        </geometry>
      </collision>

      <!-- Combined inertia for motor hub -->
      <xacro:cylinder_inertia m="${motor_hub_props['total_mass']}"
                              r="${motor_hub_props['wheel_radius']}"
                              l="${motor_hub_props['wheel_length']}"
                              o_xyz="0 0 0"
                              o_rpy="${pi/2} 0 ${pi/2.0*(reflect - 1)}" >
      </xacro:cylinder_inertia>
    </link>

    <!-- Motor Hub Joint -->
    <joint name="${robot_prefix}${prefix}${motor_hub_props['number']}_motor_hub_joint" type="continuous">
      <axis xyz="0 1 0" rpy="0 0 0" />
      <parent link="${robot_prefix}base_link"/>
      <child link="${robot_prefix}${prefix}${motor_hub_props['number']}_motor_hub"/>
      <origin xyz="${motor_hub_props['x_offset']} ${reflect* motor_hub_props['y_offset']} ${motor_hub_props['z_offset']}" rpy="0 0 0"/>
      <dynamics damping="0.02" friction="0.1"/>
    </joint>

  </xacro:macro>

<!-- ===================== Base xacro ==========================================

  params:
  - link_name [string]: link name;
  - base_props [dictionary]: base link properties;
  - mesh [string]: file name of the link mesh;
    - DEFAULT Value -> Empty string
  - origin [block]: origin, position and orientation of the link;
-->
  <xacro:macro name="base"
               params="robot_prefix link_name:='base_link' base_prop mesh:='' scale:='' *origin ">
    <link name="${robot_prefix}${link_name}">
    <!-- Remover a inércia do link raiz -->
    <!-- <xacro:cylinder_inertia ... /> -->
    <xacro:if value="${mesh != '' }" >
      <visual>
        <xacro:insert_block name="origin" />
        <geometry>
          <!-- The folder path get a folder_name global parameter -->
          <xacro:if value="${scale != '' }" >
            <mesh filename="model:/$(find ${package_name})/meshes/${robot_name}/${mesh}" scale="${scale}"/>
          </xacro:if>
          <xacro:if value="${scale == '' }" >
            <mesh filename="model:/$(find ${package_name})/meshes/${robot_name}/${mesh}" />
          </xacro:if>
        </geometry>
        <material name="blue" />
      </visual>
    </xacro:if>
    <xacro:if value="${mesh == '' }" >
      <visual>
        <xacro:insert_block name="origin" />
        <geometry>
          <box size="${base_prop['base']['length']} ${base_prop['base']['width']} ${base_prop['base']['height']}"/>
        </geometry>
        <material name="blue" />
      </visual>
    </xacro:if>
    <collision>
      <origin xyz="-0.1 0.0 0.2475" rpy="0.0 0.0 0.0"/>
      <geometry>
        <box size="${base_prop['base']['length']} ${base_prop['base']['width']} ${base_prop['base']['height']}"/>
      </geometry>
    </collision>
    </link>
  </xacro:macro>

<!-- ===================== Wheel suport xacro ==========================================
  params:
  - robot_prefix [string]: robot prefix for link names;
  - wheel_props [dictionary]: wheel properties;
-->
  <xacro:macro name="wheel_support"
               params="robot_prefix prefix reflect wheel_support_props">
    <link name="${robot_prefix}${prefix}${wheel_support_props['number']}_wheel_support">
      <visual>
        <origin xyz="${wheel_support_props['x_offset']} ${-wheel_support_props['y_offset'] * reflect} ${wheel_support_props['z_offset']}" rpy="0 0 ${pi/2}"/>
        <geometry>
          <box size="${wheel_support_props['length']} ${wheel_support_props['width']} ${wheel_support_props['height']}"/>
        </geometry>
        <material name="black" />
      </visual>
      <collision>
        <origin xyz="${wheel_support_props['x_offset']} ${-wheel_support_props['y_offset'] * reflect} ${wheel_support_props['z_offset']}" rpy="0 0 ${pi/2}"/>
        <geometry>
          <box size="${wheel_support_props['length']} ${wheel_support_props['width']} ${wheel_support_props['height']}"/>
        </geometry>
      </collision>
      <inertial>
        <mass value="${wheel_support_props['mass']}"/>
        <inertia ixx="${wheel_support_props['ixx']}" ixy="0" ixz="0"
                 iyy="${wheel_support_props['iyy']}" iyz="0" izz="${wheel_support_props['izz']}"/>
        <origin xyz="${wheel_support_props['x_offset']} ${-wheel_support_props['y_offset'] * reflect} ${wheel_support_props['z_offset']}" rpy="0 0 ${pi/2}"/>
      </inertial>
    </link>

    <!-- Joint to connect wheel_support to base_link -->
    <joint name="${robot_prefix}${prefix}${wheel_support_props['number']}_wheel_support_joint" type="fixed">
      <parent link="${robot_prefix}base_link"/>
      <child link="${robot_prefix}${prefix}${wheel_support_props['number']}_wheel_support"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
    </joint>
  </xacro:macro>
<!-- ===================== Wheel suport end xacro ==========================================
  params:
  - robot_prefix [string]: robot prefix for link names;
  - wheel_props [dictionary]: wheel properties;
-->
  <xacro:macro name="wheel_support_end"
               params="robot_prefix prefix reflect wheel_support_end_props">
    <link name="${robot_prefix}${prefix}${wheel_support_end_props['number']}_wheel_support_end">
      <visual>
        <origin xyz="${wheel_support_end_props['x_offset']} ${-wheel_support_end_props['y_offset'] * reflect} ${wheel_support_end_props['z_offset']}" rpy="0 0 0"/>
        <geometry>
          <box size="${wheel_support_end_props['length']} ${wheel_support_end_props['width']} ${wheel_support_end_props['height']}"/>
        </geometry>
        <material name="black" />
      </visual>
      <collision>
        <origin xyz="${wheel_support_end_props['x_offset']} ${-wheel_support_end_props['y_offset'] * reflect} ${wheel_support_end_props['z_offset']}" rpy="0 0 0"/>
        <geometry>
          <box size="${wheel_support_end_props['length']} ${wheel_support_end_props['width']} ${wheel_support_end_props['height']}"/>
        </geometry>
      </collision>
      <inertial>
        <mass value="${wheel_support_end_props['mass']}"/>
        <inertia ixx="${wheel_support_end_props['ixx']}" ixy="0" ixz="0"
                 iyy="${wheel_support_end_props['iyy']}" iyz="0" izz="${wheel_support_end_props['izz']}"/>
        <origin xyz="${wheel_support_end_props['x_offset']} ${-wheel_support_end_props['y_offset'] * reflect} ${wheel_support_end_props['z_offset']}" rpy="0 0 0"/>
      </inertial>
    </link>

    <!-- Joint to connect wheel_support to base_link -->
    <joint name="${robot_prefix}${prefix}${wheel_support_end_props['number']}_wheel_support_end_joint" type="fixed">
      <parent link="${robot_prefix}base_link"/>
      <child link="${robot_prefix}${prefix}${wheel_support_end_props['number']}_wheel_support_end"/>
      <origin xyz="0 0 0" rpy="0 0 0"/>
    </joint>
  </xacro:macro>

<!-- ===================== Footprint xacro ==========================================

  params:
  - base_props [dictionary]: base link properties;
  - mesh [string]: file name of the link mesh;
    - DEFAULT Value -> Empty string
  - origin [block]: origin, position and orientation of the link;
-->
  <xacro:macro name="footprint"
               params="robot_prefix motor_hub_props">
    <!-- Base-Footprint -->
    <link name="${robot_prefix}base_footprint">
      <!-- Adicionar a inércia aqui -->
      <xacro:cylinder_inertia m="${motor_hub_props['total_mass']}"
                              r="${motor_hub_props['wheel_radius']}"
                              l="${motor_hub_props['wheel_length']}"
                              o_xyz="0.0 0.0 0.0"
                              o_rpy="${pi/2.0} 0.0 0.0" />
    </link>
    <!-- Joint to connect base_footprint with base_link -->
    <joint name="${robot_prefix}base_footprint_joint" type="fixed">
      <parent link="${robot_prefix}base_footprint"/> 
      <child link="${robot_prefix}base_link" />
      <origin xyz="0 0 ${motor_hub_props['wheel_radius'] + motor_hub_props['z_offset']}" rpy="0 0 0" />
    </joint>
  </xacro:macro>
<!-- ======================================================================= -->

<!-- ======================= Intertial macros ===============================-->
<!-- ===================== Cylinder intertia xacro =============================

  params:
  - m [float]: link mass;
  - r [float]: cylinder radius;
  - l [float]: cylinder lenght (height);
-->
  <xacro:macro name="cylinder_inertia" params="m r l o_xyz:='0.0 0.0 0.0' o_rpy:='0.0 0.0 0.0'">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${m*(3*r*r+l*l)/12}" ixy = "0" ixz = "0" 
               iyy="${m*(3*r*r+l*l)/12}" iyz = "0" izz="${m*r*r/2}"/>
      <origin xyz="${o_xyz}" rpy="${o_rpy}" />
    </inertial>
  </xacro:macro>

<!-- ===================== Box intertia xacro ==================================

  params:
  - m [float]: link mass;
  - x [float]: link dimension on the X-axis;
  - y [float]: link dimension on the Y-axis;
  - z [float]: link dimension on the Z-axis;
-->
 <xacro:macro name="box_inertia" params="m x y z o_xyz:='0.0 0.0 0.0' o_rpy:='0.0 0.0 0.0'">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${m / 12.0 * (y*y + z*z)}" ixy="0.0" ixz="0.0"
               iyy="${m / 12.0 * (x*x + z*z)}" iyz="0.0" 
               izz="${m / 12.0 * (x*x + y*y)}"/>
      <origin xyz="${o_xyz}" rpy="${o_rpy}" />
    </inertial>
  </xacro:macro>

<!-- ===================== Sphere intertia xacro ===============================

  params:
  - m [float]: link mass;
  - r [float]: sphere radius;
-->
  <xacro:macro name="sphere_inertia" params="m r">
    <inertial>
      <mass value="${m}"/>
      <inertia ixx="${2.0*m*(r*r)/5.0}" ixy="0.0" ixz="0.0" iyy="${2.0*m*(r*r)/5.0}" iyz="0.0" izz="${2.0*m*(r*r)/5.0}"/>
    </inertial>
  </xacro:macro>

<!-- ===================== Default intertial xacro =============================

  params:
  - m [float]: link mass;
-->
  <xacro:macro name="default_inertial" params="mass">
    <inertial>
      <mass value="${mass}"/>
      <inertia ixx="1.0" ixy="0.0" ixz="0.0" iyy="1.0" iyz="0.0" izz="1.0"/>
    </inertial>
  </xacro:macro>
<!-- ========================================================================-->

<!-- ===================== Material ============================================

  RVIZ material RGBA definition.
-->

  <material name="yellow">
    <color rgba="1 0.95 0 1"/>
  </material>
  <material name="blue">
    <color rgba="0 0 1 1"/>
  </material>
  <material name="light_blue">
    <color rgba="0 0.5 0.8 1"/>
  </material>
  <material name="black">
    <color rgba="0 0 0 1"/>
  </material>
  <material name="white">
    <color rgba="1 1 1 1"/>
  </material>
  <material name="red">
    <color rgba="0.8 0.0 0.0 1.0"/>
  </material>
  <material name="silver">
    <color rgba="0.79 0.82 0.93 1"/>
  </material>
  <material name="dark_grey">
    <color rgba="0.3 0.3 0.3 1"/>
  </material>
<!-- ========================================================================-->

</robot>